name: Preprocess user data
description: Loads JSON user data, encodes categorical fields, and splits into training and test sets.
inputs:
  - {name: json_data, type: Json}
outputs:
  - {name: X_train, type: JsonArray}
  - {name: y_train, type: JsonArray}
  - {name: X_test, type: JsonArray}
  - {name: y_test, type: JsonArray}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==2.2.2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'pandas==2.2.2' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - |
      import pandas as pd
      import json
      import argparse
      import os
      from sklearn.model_selection import train_test_split

      def preprocess_data(data):
          df = pd.DataFrame(data)
          df = pd.get_dummies(df, columns=['gender'], drop_first=True)
          X = df.drop('owns_car', axis=1)
          y = df['owns_car']
          X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
          return (
              X_train.to_dict(orient='records'),
              y_train.tolist(),
              X_test.to_dict(orient='records'),
              y_test.tolist()
          )

      parser = argparse.ArgumentParser()
      parser.add_argument("--json_data", type=str, required=True)
      parser.add_argument("--X_train", type=str)
      parser.add_argument("--y_train", type=str)
      parser.add_argument("--X_test", type=str)
      parser.add_argument("--y_test", type=str)
      args = parser.parse_args()

      with open(args.json_data, "r") as f:
          json_data = json.load(f)

      X_train, y_train, X_test, y_test = preprocess_data(json_data)

      os.makedirs(os.path.dirname(args.X_train), exist_ok=True)
      with open(args.X_train, "w") as f:
          json.dump(X_train, f)

      with open(args.y_train, "w") as f:
          json.dump(y_train, f)

      with open(args.X_test, "w") as f:
          json.dump(X_test, f)

      with open(args.y_test, "w") as f:
          json.dump(y_test, f)
    args:
    - --json_data
    - {inputPath: json_data}
    - --X_train
    - {outputPath: X_train}
    - --y_train
    - {outputPath: y_train}
    - --X_test
    - {outputPath: X_test}
    - --y_test
    - {outputPath: y_test}
