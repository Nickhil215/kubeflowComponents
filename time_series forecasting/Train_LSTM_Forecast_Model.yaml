name: Train LSTM Forecast Model
description: Trains an LSTM model on time series data using early stopping and user-defined epochs/batch size.

inputs:
  - {name: model_path, type: Path}
  - {name: X_train, type: NumpyArray}
  - {name: y_train, type: NumpyArray}
  - {name: X_val, type: NumpyArray}
  - {name: y_val, type: NumpyArray}
  - {name: epochs, type: Integer}
  - {name: batch_size, type: Integer}

outputs:
  - {name: trained_model_path, type: Path}

implementation:
  container:
    image: tensorflow/tensorflow:2.15.0
    command:
    - sh
    - -c
    - |
      exec "$0" "$@"
    - python3
    - -u
    - -c
    - |
      import numpy as np
      import argparse
      import os
      from tensorflow.keras.models import load_model
      from tensorflow.keras.callbacks import EarlyStopping

      parser = argparse.ArgumentParser()
      parser.add_argument("--model_path", type=str, required=True)
      parser.add_argument("--X_train", type=str, required=True)
      parser.add_argument("--y_train", type=str, required=True)
      parser.add_argument("--X_val", type=str, required=True)
      parser.add_argument("--y_val", type=str, required=True)
      parser.add_argument("--epochs", type=int, required=True)
      parser.add_argument("--batch_size", type=int, required=True)
      parser.add_argument("--trained_model_path", type=str)
      args = parser.parse_args()

      # Load data
      X_train = np.load(args.X_train)
      y_train = np.load(args.y_train)
      X_val = np.load(args.X_val)
      y_val = np.load(args.y_val)

      # Load model
      model = load_model(args.model_path)

      # Early stopping
      early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

      # Fit the model
      model.fit(
          X_train, y_train,
          epochs=args.epochs,
          batch_size=args.batch_size,
          validation_data=(X_val, y_val),
          callbacks=[early_stop]
      )

      # Save model
      os.makedirs(os.path.dirname(args.trained_model_path), exist_ok=True)
      model.save(args.trained_model_path)
      print(f"Trained model saved to {args.trained_model_path}")
    args:
    - --model_path
    - {inputPath: model_path}
    - --X_train
    - {inputPath: X_train}
    - --y_train
    - {inputPath: y_train}
    - --X_val
    - {inputPath: X_val}
    - --y_val
    - {inputPath: y_val}
    - --epochs
    - {inputValue: epochs}
    - --batch_size
    - {inputValue: batch_size}
    - --trained_model_path
    - {outputPath: trained_model_path}
