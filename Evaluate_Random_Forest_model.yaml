name: Evaluate Random Forest model
description: Evaluates a trained Random Forest model and outputs predictions and accuracy.
inputs:
  - {name: model, type: Model}
  - {name: X_test, type: JsonArray}
  - {name: y_test, type: JsonArray}
outputs:
  - {name: predictions, type: JsonArray}
  - {name: accuracy, type: Float}
implementation:
  container:
    image: python:3.8
    command:
      - python3
      - -u
      - -c
      - |
        import argparse
        import json
        import joblib
        import pandas as pd
        from sklearn.metrics import accuracy_score

        parser = argparse.ArgumentParser()
        parser.add_argument("--model", type=str, required=True)
        parser.add_argument("--X_test", type=str, required=True)
        parser.add_argument("--y_test", type=str, required=True)
        parser.add_argument("--predictions", type=str, required=True)
        parser.add_argument("--accuracy", type=str, required=True)
        args = parser.parse_args()

        # Load data and model
        model = joblib.load(args.model)
        with open(args.X_test, "r") as f:
            X_test = pd.DataFrame(json.load(f))
        with open(args.y_test, "r") as f:
            y_test = json.load(f)

        # Evaluate
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)

        # Output predictions and accuracy
        with open(args.predictions, "w") as f:
            json.dump(y_pred.tolist(), f)
        with open(args.accuracy, "w") as f:
            f.write(str(accuracy))
    args:
      - --model
      - {inputPath: model}
      - --X_test
      - {inputPath: X_test}
      - --y_test
      - {inputPath: y_test}
      - --predictions
      - {outputPath: predictions}
      - --accuracy
      - {outputPath: accuracy}
